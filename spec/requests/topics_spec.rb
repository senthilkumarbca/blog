require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/topics", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Topic. As you add validations to Topic, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do {
    'id' => '1',
	'title' => 'topic1'
  }
  end

  let(:invalid_attributes) do {
    'id' => 'a',
	'title' => 't'
  }
  end

  describe "GET /index" do
   	it "renders a successful response" do
    #  Topic.create! valid_attributes
    # get topics_url
    #  expect(response).to be_successful
	#-----------------------
	t = Topic.new(valid_attributes)
	t.save
	
	get topics_url
	expect(response).to be_successful
	expect(response.status).to be(200)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      topic = Topic.create! valid_attributes
      get topic_url(topic)
      expect(response).to be_successful
	  expect(response.status).to be(200)
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_topic_url
      expect(response).to be_successful
	  expect(response.status).to be(200)
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      topic = Topic.create! valid_attributes
      get edit_topic_url(topic)
      expect(response).to be_successful
	  expect(response.status).to be(200)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Topic" do
        expect {
          post topics_url, params: { topic: valid_attributes }
        }.to change(Topic, :count).by(1)
		expect(response.status).to be(302)
		expect(flash[:notice]).to eq("Topic was successfully created.")
      end

      it "redirects to the created topic" do
        post topics_url, params: { topic: valid_attributes }
        expect(response).to redirect_to(topic_url(Topic.last))
		expect(response.status).to be(302)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Topic" do
        expect {
          post topics_url, params: { topic: invalid_attributes }
        }.to change(Topic, :count).by(0)
		expect(response).to have_http_status(:unprocessable_entity)
		expect(flash[:notice]).to_not eq("Topic was successfully created.")
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post topics_url, params: { topic: invalid_attributes }
        expect(response).to render_template(:new)
		expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do {
        'id' => '2',
		'title' => 'topic2'
      }
	  end

      it "updates the requested topic" do
        topic = Topic.create! valid_attributes
        patch topic_url(topic), params: { topic: new_attributes }
        topic.reload
        #skip("Add assertions for updated state")
		
		get topic_url(topic)
		expect(response).to render_template(:show)
		expect(response).to have_http_status(:ok)
		expect(flash[:notice]).to eq("Topic was successfully updated.")
      end

      it "redirects to the topic" do
        topic = Topic.create! valid_attributes
        patch topic_url(topic), params: { topic: new_attributes }
        topic.reload
        expect(response).to redirect_to(topic_url(topic))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        topic = Topic.create! valid_attributes
        patch topic_url(topic), params: { topic: invalid_attributes }
        expect(response).to render_template(:edit)
		expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested topic" do
      topic = Topic.create! valid_attributes
      expect {
        delete topic_url(topic)
      }.to change(Topic, :count).by(-1)
	  expect(flash[:notice]).to eq("Topic was successfully destroyed.")
    end

    it "redirects to the topics list" do
      topic = Topic.create! valid_attributes
      delete topic_url(topic)
	  expect(response.status).to be(302)
      expect(response).to redirect_to(topics_url)
    end
  end
end
